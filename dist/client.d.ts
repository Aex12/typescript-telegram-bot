import { Client } from 'undici';
import * as Tgt from './types/telegram';
export interface TelegramClientOptions {
    token: string;
    baseUrl?: string;
    timeout?: number;
}
export default class TelegramClient {
    BASE_URL: string;
    token: string;
    httpClient: Client;
    constructor(config: TelegramClientOptions);
    request<T>(endpoint: string, params?: Tgt.RequestParameters): Promise<T>;
    getUpdates(params?: Tgt.GetUpdatesParameters): Promise<Tgt.Update[]>;
    setWebhook(params?: Tgt.SetWebhookParameters): Promise<void>;
    deleteWebhook(params?: Tgt.DeleteWebhookParameters): Promise<void>;
    getWebhookInfo(): Promise<Tgt.WebhookInfo>;
    getMe(): Promise<Tgt.User>;
    logOut(): Promise<void>;
    close(): Promise<void>;
    sendMessage(params: Tgt.SendMessageParameters): Promise<Tgt.Message>;
    forwardMessage(params: Tgt.ForwardMessageParameters): Promise<Tgt.Message>;
    copyMessage(params: Tgt.CopyMessageParameters): Promise<Tgt.MessageId>;
    sendPhoto(params: Tgt.SendPhotoParameters): Promise<Tgt.Message>;
    sendAudio(params: Tgt.SendAudioParameters): Promise<Tgt.Message>;
    sendDocument(params: Tgt.SendDocumentParameters): Promise<Tgt.Message>;
    sendVideo(params: Tgt.SendVideoParameters): Promise<Tgt.Message>;
    sendAnimation(params: Tgt.SendAnimationParameters): Promise<Tgt.Message>;
    sendVoice(params: Tgt.SendVoiceParameters): Promise<Tgt.Message>;
    sendVideoNote(params: Tgt.SendVideoNoteParameters): Promise<Tgt.Message>;
    sendMediaGroup(params: Tgt.SendMediaGroupParameters): Promise<Tgt.Message[]>;
    sendLocation(params: Tgt.SendLocationParameters): Promise<Tgt.Message>;
    editMessageLiveLocation(params: Tgt.EditMessageLiveLocationParameters): Promise<Tgt.Message | true>;
    stopMessageLiveLocation(params: Tgt.StopMessageLiveLocationParameters): Promise<Tgt.Message | true>;
    sendVenue(params: Tgt.SendVenueParameters): Promise<Tgt.Message>;
    sendContact(params: Tgt.SendContactParameters): Promise<Tgt.Message>;
    sendPoll(params: Tgt.SendPollParameters): Promise<Tgt.Message>;
    sendDice(params: Tgt.SendDiceParameters): Promise<Tgt.Message>;
    sendChatAction(params: Tgt.SendChatActionParameters): Promise<true>;
    getUserProfilePhotos(params: Tgt.GetUserProfilePhotosParameters): Promise<Tgt.UserProfilePhotos>;
    getFile(params: Tgt.GetFileParameters): Promise<Tgt.File>;
    kickChatMember(params: Tgt.KickChatMemberParameters): Promise<true>;
    unbanChatMember(params: Tgt.UnbanChatMemberParameters): Promise<true>;
    restrictChatMember(params: Tgt.RestrictChatMemberParameters): Promise<true>;
    promoteChatMember(params: Tgt.PromoteChatMemberParameters): Promise<true>;
    setChatAdministratorCustomTitle(params: Tgt.SetChatAdministratorCustomTitleParameters): Promise<true>;
    setChatPermissions(params: Tgt.SetChatPermissionsParameters): Promise<true>;
    exportChatInviteLink(params: Tgt.ExportChatInviteLinkParameters): Promise<string>;
    setChatPhoto(params: Tgt.SetChatPhotoParameters): Promise<true>;
    deleteChatPhoto(params: Tgt.DeleteChatPhotoParameters): Promise<true>;
    setChatTitle(params: Tgt.SetChatTitleParameters): Promise<true>;
    setChatDescription(params: Tgt.SetChatDescriptionParameters): Promise<true>;
    pinChatMessage(params: Tgt.PinChatMessageParameters): Promise<true>;
    unpinChatMessage(params: Tgt.UnpinChatMessageParameters): Promise<true>;
    unpinAllChatMessages(params: Tgt.UnpinAllChatMessagesParameters): Promise<true>;
    leaveChat(params: Tgt.LeaveChatParameters): Promise<true>;
    getChat(params: Tgt.GetChatParameters): Promise<Tgt.Chat>;
    getChatAdministrators(params: Tgt.GetChatAdministratorsParameters): Promise<Tgt.ChatMember[]>;
    getChatMembersCount(params: Tgt.GetChatMembersCountParameters): Promise<number>;
    getChatMember(params: Tgt.GetChatMemberParameters): Promise<Tgt.ChatMember>;
    setChatStickerSet(params: Tgt.SetChatStickerSetParameters): Promise<true>;
    deleteChatStickerSet(params: Tgt.DeleteChatStickerSetParameters): Promise<true>;
    answerCallbackQuery(params: Tgt.AnswerCallbackQueryParameters): Promise<true>;
    setMyCommands(params: Tgt.SetMyCommandsParameters): Promise<true>;
    getMyCommands(): Promise<Tgt.BotCommand[]>;
    editMessageText(params: Tgt.EditMessageTextParameters): Promise<Tgt.Message | true>;
    editMessageCaption(params: Tgt.EditMessageCaptionParameters): Promise<Tgt.Message | true>;
    editMessageMedia(params: Tgt.EditMessageMediaParameters): Promise<Tgt.Message | true>;
    editMessageReplyMarkup(params: Tgt.EditMessageReplyMarkupParameters): Promise<Tgt.Message | true>;
    stopPoll(params: Tgt.StopPollParameters): Promise<Tgt.Poll>;
    deleteMessage(params: Tgt.DeleteMessageParameters): Promise<true>;
    sendSticker(params: Tgt.SendStickerParameters): Promise<Tgt.Message>;
    getStickerSet(params: Tgt.GetStickerSetParameters): Promise<Tgt.StickerSet>;
    uploadStickerFile(params: Tgt.UploadStickerFileParameters): Promise<Tgt.File>;
    createNewStickerSet(params: Tgt.CreateNewStickerSetParameters): Promise<true>;
    addStickerToSet(params: Tgt.AddStickerToSetParameters): Promise<true>;
    setStickerPositionInSet(params: Tgt.SetStickerPositionInSetParameters): Promise<true>;
    deleteStickerFromSet(params: Tgt.DeleteStickerFromSetParameters): Promise<true>;
    setStickerSetThumb(params: Tgt.SetStickerSetThumbParameters): Promise<true>;
    answerInlineQuery(params: Tgt.AnswerInlineQueryParameters): Promise<true>;
    sendInvoice(params: Tgt.SendInvoiceParameters): Promise<Tgt.Message>;
    answerShippingQuery(params: Tgt.AnswerShippingQueryParameters): Promise<true>;
    answerPreCheckoutQuery(params: Tgt.AnswerPreCheckoutQueryParameters): Promise<true>;
    setPassportDataErrors(params: Tgt.SetPassportDataErrorsParameters): Promise<true>;
    sendGame(params: Tgt.SendGameParameters): Promise<Tgt.Message>;
    setGameScore(params: Tgt.SetGameScoreParameters): Promise<Tgt.Message | true>;
    getGameHighScores(params: Tgt.GetGameHighScoresParameters): Promise<Tgt.GameHighScore[]>;
}
